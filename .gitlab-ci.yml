workflow:
  rules:
    - if: $CI_COMMIT_TITLE =~ /-draft$/
      when: never
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Draft/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  NPM_TOKEN: ${CI_JOB_TOKEN}

# Cache explained: https://stackoverflow.com/a/69744855
# global cache settings for all jobs
# Ensure compatibility with the install job
# goal: the install job loads the cache and
# all other jobs can only use it
cache:
  # most npm libraries will only have 1 entry for the base project deps
  - key: &global_cache_node_mods
      files:
        - package-lock.json
      prefix: 'node_modules'
    paths:
      - node_modules/
    policy: pull # prevent subsequent jobs from modifying cache

branch-up-to-date:
  stage: .pre
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  tags:
    - node
  before_script:
    - git fetch
  script:
    - LATEST_ON_TARGET_BRANCH=$(git log -n 1 --pretty=format:"%H" origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
    - echo "Latest commit on the target branch is $LATEST_ON_TARGET_BRANCH"
    - COMMON_ANCESTOR=$(git merge-base origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME)
    - echo "Common ancestor of source and target branch is $COMMON_ANCESTOR"
    - |
      if [[ "${LATEST_ON_TARGET_BRANCH}" = "${COMMON_ANCESTOR}" ]]; then
        echo "The source branch is up to date with the target branch"
      else
        echo "The source branch is not up to date with the target branch"
        exit 1
      fi

install:
  stage: .pre
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      needs: ['branch-up-to-date']
    - when: on_success # Run the job in other cases
  cache:
    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job
    - key: ${CI_JOB_NAME}
      # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
      paths:
        - .npm/
      when: on_success
      policy: pull-push

    # Mimic &global_cache_node_mods config but override policy
    # to allow this job to update the cache at the end of the job
    # and only update if it was a successful job
    # NOTE: I would use yaml anchors here but overriding the policy
    # in a yaml list is not as easy as a dictionary entry (#5)
    - key:
        files:
          - package-lock.json
        prefix: 'node_modules'
      paths:
        - node_modules/
      when: on_success
      policy: pull-push
  tags:
    - node
  before_script:
    - npm config set -- //$CI_SERVER_HOST/api/v4/packages/npm/:_authToken=$CI_JOB_TOKEN
    - npm config set @os3:registry https://$CI_SERVER_HOST/api/v4/packages/npm/
    - git fetch --tags --force
  script:
    - npm ci --cache .npm --ignore-scripts  --prefer-offline

lint:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  tags:
    - node
  script: npm run lint

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  tags:
    - node
  script: npm run test

release:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - node
  before_script:
    - echo "@os3:registry=https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/">.npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}">>.npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}">>.npmrc
    - echo "Created the following .npmrc:"; cat .npmrc
    - rm -rf .husky
  script:
    - npm run release
